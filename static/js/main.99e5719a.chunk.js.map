{"version":3,"sources":["Utils.js","Components/User/User.js","Components/AddUser/AddUser.js","Components/SearchBox/SearchBox.js","Components/Todos/Todos.js","Components/AddTodo/AddTodo.js","Components/TodosBox.js","Components/Posts/Posts.js","Components/AddPost/AddPost.js","Components/PostsBox.js","Components/Users/Users.js","App.js","reportWebVitals.js","index.js"],"names":["utils","getAllUsers","a","users","axios","get","resp","data","map","item","id","name","email","street","address","city","zipcode","hasIncompleted","getItemsById","url","allItems","userItems","filter","x","userId","parseInt","User","props","handleInputChange","e","value","target","setState","user","state","setCurrentUser","toggleOtherData","showOtherData","this","show","borderColor","userSelected","selectedUserId","className","to","onClick","selectUser","type","onChange","onMouseEnter","style","display","updateUser","deleteUser","Component","AddUser","addUser","length","alert","SearchBox","placeholder","setKeyword","Todos","todos","match","params","todosList","todo","completed","title","toString","markCompleted","AddTodo","addTodo","TodosBox","getUserTodos","Utils","hasIncompletedTasks","todosArr","lastTodoId","newTodo","newTodosArr","concat","history","push","todoIndex","findIndex","t","forEach","updateHasIncompletedTasks","prevProps","exact","path","render","Posts","posts","postsList","post","body","addPost","PostsBox","getUserPosts","postsArr","lastPostId","newPost","newPostsArr","b","Users","currentUser","usersArr","lastUserId","newUaserId","newUsersArr","updatedUsers","u","keyword","userIndex","userList","toLowerCase","includes","d","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.99e5719a.chunk.js","sourcesContent":["import axios from 'axios';\n\n//get all users data from url\nconst getAllUsers = async () =>\n{\n    let users = [];\n\n    let resp = await axios.get(\"https://jsonplaceholder.typicode.com/users\")\n    users = resp.data.map(item => {\n        return {\n            id: item.id,\n            name: item.name,\n            email: item.email,\n            street: item.address.street,\n            city: item.address.city,\n            zipcode: item.address.zipcode,\n            hasIncompleted: true\n        }\n    })\n    return users;\n}\n\n//get data from url by user id\nconst getItemsById = async (id, url) =>\n{\n    let resp = await axios.get(url);\n    let allItems = resp.data;\n    let userItems = allItems.filter(x => x.userId === parseInt(id));\n    return userItems;\n}\n\nconst utils = {\n    getAllUsers,\n    getItemsById\n}\n\nexport default utils;","import React, {Component} from 'react'\nimport {Link} from 'react-router-dom'\nimport './User.css'\n\nclass User extends Component\n{\n    constructor(props)\n    {\n        super(props)\n        this.state = {\n            user : this.props.data,\n            showOtherData: false,\n        }\n    }\n\n    handleInputChange = async (e) => {\n        const value = e.target.value;\n        const name = e.target.name;\n        await this.setState({user: {...this.state.user, [name]: value}});\n        this.props.setCurrentUser(this.state.user);\n    }\n\n    toggleOtherData = () => {\n        this.setState({showOtherData: !this.state.showOtherData});\n    }\n\n    render()\n    {\n        let user = this.state.user;\n        let id = user.id;\n        let show = this.state.showOtherData ? \"block\" : \"none\";\n        let borderColor = user.hasIncompleted ? \"uncompletedTasks\" : \"completedTasks\";\n        let userSelected = (this.props.selectedUserId === id) ? \"userSelected\" : \"\";\n\n        return (\n            <div className={`user ${borderColor} ${userSelected}`}  >\n                <Link to={`/user/${id}`} onClick={() => this.props.selectUser(id)}>\n                    <strong>ID: {id}</strong>\n                </Link>\n                <br/>\n                <br/>\n                <div className=\"data-row\">\n                    <strong>Name:&nbsp;</strong>\n                    <input className=\"textbox\" type=\"text\" name=\"name\" value={user.name} onChange={this.handleInputChange}/>\n                </div>\n                <div className=\"data-row\">\n                    <strong>Email:&nbsp;</strong>\n                    <input className=\"textbox\" type=\"text\" name=\"email\" value={user.email} onChange={this.handleInputChange}/>\n                </div>\n                \n                <input type=\"button\" value=\"Other Data\" className=\"m-right\" onMouseEnter={this.toggleOtherData}/>\n\n                <div className=\"other-data\" style={{display: show}}>\n                    <div className=\"data-row\">\n                        <strong>Street:&nbsp;</strong>\n                        <input className=\"textbox\" type=\"text\" name=\"street\" value={user.street} onChange={this.handleInputChange}/>\n                    </div>\n                    <div className=\"data-row\">\n                        <strong>City:&nbsp;</strong>\n                        <input className=\"textbox\" type=\"text\" name=\"city\" value={user.city} onChange={this.handleInputChange}/>\n                    </div>\n                    <div className=\"data-row\">\n                        <strong>Zipcode:&nbsp;</strong>\n                        <input className=\"textbox\" type=\"text\" name=\"zipcode\" value={user.zipcode} onChange={this.handleInputChange}/>\n                    </div>\n                </div>\n\n                <input type=\"button\" value=\"Update\" className=\"btn m-right\" onClick={() => this.props.updateUser(id)}/>\n                <input type=\"button\" value=\"Delete\" className=\"btn\" onClick={() => this.props.deleteUser(id)}/>            \n            </div>\n        )\n    }\n}\n\nexport default User;","import React, {Component} from 'react'\nimport {Link} from 'react-router-dom'\nimport './AddUser.css'\n\nclass AddUser extends Component\n{\n    constructor(props)\n    {\n        super(props)\n        this.state = {\n            name: \"\",\n            email: \"\"\n        }\n    }\n\n    handleInputChange = async (e) => \n    {\n        const value = e.target.value;\n        const name = e.target.name;\n        await this.setState({[name]: value});\n        this.props.setCurrentUser(this.state);\n    }\n\n    addUser = () => {\n        if (this.state.name.length !== 0 && this.state.email.length !== 0) {\n            this.props.addUser()\n        } else {\n            alert(\"Name and email cannot be empty!\")\n        }\n    }\n\n    render()\n    {\n        return (\n        <div className=\"add-user\">\n            <h3>Add New User</h3>\n            <div className=\"add-user-body\">\n                Name: <input type=\"text\" name=\"name\" onChange={this.handleInputChange}/><br/>\n                Email: <input type=\"text\" name=\"email\" onChange={this.handleInputChange}/><br/>\n                <div>\n                    <Link to=\"/\">\n                            <button type=\"button\" className=\"btn m-right\">Cancel</button>\n                    </Link>\n                    <input type=\"button\" value=\"Add\" className=\"btn\" onClick={() => this.addUser()}/>\n                </div>\n\n            </div>\n\n        </div>\n        )\n    }\n}\n\n\nexport default AddUser;\n","import React from 'react';\nimport './SearchBox.css'\n\nconst SearchBox = ({placeholder, setKeyword}) => (\n    <div className=\"search-box\">\n        Search <input type=\"search\" placeholder={placeholder} onChange={setKeyword}/>\n    </div>\n)\n\nexport default SearchBox;\n","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport './Todos.css'\n\nclass Todos extends Component {\n    render()\n    {\n        const todos = this.props.todos;\n        const id = this.props.match.params.id;\n        let show = \"\";\n\n        const todosList = todos.map((todo) => {\n            todo.completed ? show = \"none\" : show = \"block\";\n\n            return  <div key={todo.id} className=\"todo\">\n                        <div><strong>Title: </strong><span>{todo.title}</span></div>\n                        <div className=\"completed-row\">\n                            <div><strong>Completed: </strong><span>{todo.completed.toString()}</span></div>\n                            <button style={{display: show}} className=\"btn\" onClick={e => this.props.markCompleted(todo.id)}>Mark Completed</button>\n                        </div>\n                    </div>                              \n        })\n\n        return (\n        <div className=\"todos\">\n            <div className=\"todos-header\">\n                <h3>Todos - User {id}</h3>\n                <Link to={`/user/${id}/addTodo`}>\n                        <button type=\"button\" className=\"btn-add-todo btn\">Add</button>\n                </Link>                \n            </div>\n            <div className=\"todos-list\">\n                {todosList}\n            </div>\n            \n        </div>\n        )\n    }\n}\n\nexport default Todos;","import React, {Component} from 'react'\nimport {Link} from 'react-router-dom'\nimport './AddTodo.css'\n\nclass AddTodo extends Component\n{\n    constructor(props)\n    {\n        super(props)\n        this.state = {\n            title: '',\n        }\n    }\n\n    handleInputChange = async (e) => \n    {\n        await this.setState({title: e.target.value});\n    }\n\n    render()\n    {\n        const id = this.props.match.params.id;\n\n        return (\n        <div className=\"add-todo\">\n            <h3>Add New Todo - User {id}</h3>\n            <div className=\"add-todo-body\">\n                Title: <input type=\"text\" name=\"title\" onChange={this.handleInputChange}/><br/>\n                <div>\n                    <Link to={`/user/${id}`}>\n                            <button type=\"button\" className=\"btn m-right\">Cancel</button>\n                    </Link>\n                    <input type=\"button\" value=\"Add\" className=\"btn\" onClick={() => this.props.addTodo(this.state.title)}/>                          \n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default AddTodo;","import React, {Component} from 'react'\nimport {Switch, Route} from 'react-router-dom'\nimport Todos from './Todos/Todos'\nimport AddTodo from './AddTodo/AddTodo'\nimport Utils from '../Utils'\n\nclass TodosBox extends Component\n{\n    constructor(props)\n    {\n        super(props)\n        this.state = {\n            todos: []\n        }\n    }\n\n    //get all user's todos and check if has incompleted\n    getUserTodos = async () => \n    {\n        const todos = await Utils.getItemsById(this.props.match.params.id, \"https://jsonplaceholder.typicode.com/todos\")\n        this.setState({todos : todos})\n        this.hasIncompletedTasks();\n    }\n\n    componentDidMount() \n    {\n        this.getUserTodos();\n    }\n\n    componentDidUpdate(prevProps)\n    {\n        if (prevProps.match.params.id !== this.props.match.params.id) {\n            this.getUserTodos();\n        }\n    }\n\n    /*\n    add new todo to todos array in state\n    new todo is always incompleted -> run check if has incompleted todos\n    redirect back to todos list\n    */\n    addTodo = async (title) => \n    {\n        let todosArr = this.state.todos;\n        let lastTodoId = 0;\n        if (todosArr.length > 0) {\n            lastTodoId = todosArr[todosArr.length - 1].id\n        }\n        let newTodoId = lastTodoId + 1;\n\n        let newTodo = {\n            id: newTodoId,\n            userId: this.props.match.params.id,\n            title: title,\n            completed: false\n        }\n\n        let newTodosArr = todosArr.concat(newTodo);\n        await this.setState({todos: newTodosArr});\n        this.hasIncompletedTasks();\n        this.props.history.push(`/user/${this.props.match.params.id}`)\n    }\n\n    //mark selected todo as completed -> -> run check if has incompleted todos\n    markCompleted = async (id) =>\n    {\n        let todos = this.state.todos;\n        let todoIndex = todos.findIndex(t => t.id === parseInt(id))\n        todos[todoIndex].completed = true;           \n        await this.setState({todos: todos})\n        this.hasIncompletedTasks();\n    }\n\n    //check if user has incompleted tasks and update user in users state\n    hasIncompletedTasks = () =>\n    {\n        let hasIncompleted = false;\n\n        this.state.todos.forEach(t => {\n            if (t.completed === false)\n                hasIncompleted = true\n        })\n\n        hasIncompleted ? this.props.updateHasIncompletedTasks(this.props.match.params.id, true) : \n            this.props.updateHasIncompletedTasks(this.props.match.params.id, false);\n    }\n\n    render()\n    {\n        return (\n            <div>  \n                <Switch>\n                    <Route \n                        exact path=\"/user/:id/addTodo\"\n                        render={(props) => <AddTodo {...props} addTodo={t => this.addTodo(t)}/>}\n                    />\n                    <Route \n                        path=\"/user/:id\"\n                        render={(props) => <Todos {...props} todos={this.state.todos} markCompleted={id => this.markCompleted(id)}/>}\n                    />\n                </Switch>\n            </div>\n        )\n    }\n}\n\nexport default TodosBox;","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport './Posts.css';\n\nclass Posts extends Component {   \n    render()\n    {\n        const posts = this.props.posts;\n        const id = this.props.match.params.id;\n\n        const postsList = posts.map((post) => {\n            return  <div key={post.id} className=\"post\">\n                        <span><strong>Title: </strong>{post.title}</span><br/>\n                        <span><strong>Body: </strong>{post.body}</span>\n                    </div>                              \n        })\n\n        return (\n        <div className=\"posts\">\n            <div className=\"posts-header\">\n                <h3>Posts - User {id}</h3>\n                <Link to={`/user/${id}/addPost`}>\n                        <button type=\"button\" className=\"btn-add-post btn\">Add</button>\n                </Link>\n            </div>\n            <div className=\"posts-list\">\n                {postsList}\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default Posts;","import React, {Component} from 'react'\nimport {Link} from 'react-router-dom'\nimport './AddPost.css'\n\nclass AddTodo extends Component\n{\n    constructor(props)\n    {\n        super(props)\n        this.state = {\n            title: '',\n            body: ''\n        }\n    }\n\n    handleInputChange = async (e) => \n    {\n        const value = e.target.value;\n        const name = e.target.name;\n        await this.setState({[name]: value});\n    }\n\n    render()\n    {\n        const id = this.props.match.params.id;\n        const title = this.state.title;\n        const body = this.state.body;\n\n        return (\n        <div className=\"add-post\">\n            <h3>Add New Post - User {id}</h3>\n            <div className=\"add-post-body\">\n                Title: <input type=\"text\" name=\"title\" onChange={this.handleInputChange}/><br/>\n                Body: <input type=\"text\" name=\"body\" onChange={this.handleInputChange}/><br/>\n                <div>\n                    <Link to={`/user/${id}`}>\n                            <button type=\"button\" className=\"btn m-right\">Cancel</button>\n                    </Link>\n                    <input type=\"button\" value=\"Add\" className=\"btn\" onClick={e => this.props.addPost(title, body)}/>                    \n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default AddTodo;","import React, {Component} from 'react'\nimport {Switch, Route} from 'react-router-dom'\nimport Posts from './Posts/Posts'\nimport AddPost from './AddPost/AddPost'\nimport Utils from '../Utils'\n\nclass PostsBox extends Component\n{\n    constructor(props)\n    {\n        super(props)\n        this.state = {\n            posts: []\n        }\n    }\n\n    getUserPosts = async () => \n    {\n        const posts = await Utils.getItemsById(this.props.match.params.id, \"https://jsonplaceholder.typicode.com/posts\")\n        this.setState({posts : posts})\n    }\n\n    componentDidMount() \n    {\n        this.getUserPosts();\n    }\n\n    componentDidUpdate(prevProps)\n    {\n        if (prevProps.match.params.id !== this.props.match.params.id) {\n            this.getUserPosts();\n        }\n    }\n\n    /* add new posts to posts array in state\n    redirect back to posts list */\n    addPost = async (title, body) => \n    {\n        let postsArr = this.state.posts;\n        let lastPostId = 0;\n        if (postsArr.length > 0) {\n            lastPostId = postsArr[postsArr.length - 1].id\n        }\n        let newPostId = lastPostId + 1;\n\n        let newPost = {\n            id: newPostId,\n            userId: this.props.match.params.id,\n            title: title,\n            body: body\n        }\n\n        let newPostsArr = postsArr.concat(newPost);\n        await this.setState({posts: newPostsArr});\n        this.props.history.push(`/user/${this.props.match.params.id}`)\n    }\n\n    render()\n    {\n        return (\n            <div>  \n                <Switch>\n                    <Route \n                        exact path=\"/user/:id/addPost\"\n                        render={(props) => <AddPost {...props} addPost={(t, b) => this.addPost(t, b)}/>}\n                    />\n                    <Route \n                        path=\"/user/:id\"\n                        render={(props) => <Posts {...props} posts={this.state.posts}/>}\n                    />\n                </Switch>\n            </div>\n        )\n    }\n}\n\nexport default PostsBox;","import React, {Component} from 'react'\nimport {Link, Switch, Route} from 'react-router-dom'\nimport Utils from '../../Utils'\nimport User from '../User/User'\nimport AddUser from '../AddUser/AddUser'\nimport SearchBox from '../SearchBox/SearchBox'\nimport TodosBox from '../TodosBox'\nimport PostsBox from '../PostsBox'\nimport './Users.css'\n\n\nclass Users extends Component\n{\n    constructor()\n    {\n        super()\n        this.state = {\n            users : [], \n            currentUser : {},\n            keyword: '',\n            selectedUserId: 0\n        }\n    }\n\n    async componentDidMount()\n    {\n        const users = await Utils.getAllUsers()\n        this.setState({users : users})\n    }\n\n    //set user that is currently being edited\n    setCurrentUser = (user) => {\n        this.setState({currentUser: user})\n    }\n\n    //add user to users array in state\n    addUser = async () => {\n        // find the last user id and add 1\n        let usersArr = this.state.users;\n        let lastUserId = usersArr[usersArr.length - 1].id\n        let newUaserId = lastUserId + 1;\n\n        // add a new user to the end of users array\n        await this.setState({currentUser : {...this.state.currentUser, id : newUaserId}});\n        let newUsersArr = usersArr.concat(this.state.currentUser);\n        this.setState({users: newUsersArr})\n    }\n\n    //updates an existing user by replacing it with current user being edited\n    updateUser = () =>\n    {\n        let users = this.state.users;\n        let user = this.state.currentUser;\n        let updatedUsers = users.map(u => u.id === user.id ? user : u);\n        this.setState({users: updatedUsers})\n    }\n\n    //deletes a user from users array\n    deleteUser = (id) =>\n    {\n        let users = this.state.users.filter(x => x.id !== id);\n        this.setState({users: users})\n    }\n\n    setKeyword = (e) => {\n        this.setState({keyword: e.target.value})\n    }\n\n    //sets if user has incompleted tasks according to value received\n    updateHasIncompletedTasks = async (id, value) =>\n    {\n        let users = this.state.users;\n        let userIndex = users.findIndex(u => u.id === parseInt(id));\n        if (users.length > 0) {\n            users[userIndex].hasIncompleted = value;           \n            await this.setState({users: users});\n        }\n    }\n\n    selectUser = (id) => {\n        this.setState({selectedUserId: id});\n    }\n\n    render()\n    {\n        const {users, keyword} = this.state;\n        const filteredUsers = users.filter(user => {\n            return (\n                user.name.toLowerCase().includes(keyword.toLowerCase()) ||\n                user.email.toLowerCase().includes(keyword.toLowerCase())\n            )\n        })\n\n        let userList = filteredUsers.map((user) =>\n        {\n            return  <User \n                        key={user.id} \n                        data={user} \n                        setCurrentUser={u => this.setCurrentUser(u)} \n                        updateUser={id => this.updateUser(id)}\n                        deleteUser={id => this.deleteUser(id)}\n                        selectUser={id => this.selectUser(id)}\n                        selectedUserId={this.state.selectedUserId}\n                    />      \n        })\n\n        return (\n        <div style={{display: \"flex\"}}>\n            <div className=\"main\">\n                <h1>Users Manager</h1>\n                <div className=\"search-row\">\n                    <SearchBox placeholder=\"Search name or email\" setKeyword={this.setKeyword}/>\n                    <Link to=\"/add\">\n                        <button type=\"button\" className=\"btn\">Add</button>\n                    </Link>\n                </div>\n                <div>\n                    {userList}\n                </div>\n            </div>\n            <Switch>\n                <Route \n                    path=\"/add\" \n                    render={() => (\n                        <AddUser \n                            setCurrentUser={d => this.setCurrentUser(d)}\n                            addUser={this.addUser}\n                        />\n                    )}\n                />\n                <Route \n                    path=\"/user/:id\"\n                    render={props => \n                        <div>\n                            <TodosBox {...props} updateHasIncompletedTasks={(id, value) => this.updateHasIncompletedTasks(id, value)}/>  \n                            <PostsBox {...props}/>\n                        </div>\n                    }\n                />\n            </Switch>\n        </div>\n        )\n    }\n}\n\nexport default Users;\n","import React, {Component} from 'react'\nimport Users from './Components/Users/Users'\n\nclass App extends Component\n{\n  render()\n  {\n    return (\n      <div>\n        <Users />\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}